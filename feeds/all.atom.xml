<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Example Blog</title><link href="http://jryannel.github.io/blog/" rel="alternate"></link><link href="http://jryannel.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://jryannel.github.io/blog/</id><updated>2013-07-19T00:00:00+02:00</updated><entry><title>Architecture 001</title><link href="http://jryannel.github.io/blog/architecture-001.html" rel="alternate"></link><updated>2013-07-19T00:00:00+02:00</updated><author><name>JRyannel</name></author><id>tag:jryannel.github.io/blog,2013-07-19:architecture-001.html</id><summary type="html">&lt;p&gt;An architecture post&lt;/p&gt;
</summary></entry><entry><title>First Post</title><link href="http://jryannel.github.io/blog/first-post.html" rel="alternate"></link><updated>2013-07-19T00:00:00+02:00</updated><author><name>JRyannel</name></author><id>tag:jryannel.github.io/blog,2013-07-19:first-post.html</id><summary type="html">&lt;p&gt;AAA. This is the first post summary.&lt;/p&gt;
&lt;p&gt;And the first post content is coming here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;

&lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary></entry><entry><title>Items 001</title><link href="http://jryannel.github.io/blog/items-001.html" rel="alternate"></link><updated>2013-07-19T00:00:00+02:00</updated><author><name>JRyannel</name></author><id>tag:jryannel.github.io/blog,2013-07-19:items-001.html</id><summary type="html">&lt;p&gt;An item post&lt;/p&gt;
</summary></entry><entry><title>QMLJS 001</title><link href="http://jryannel.github.io/blog/qmljs-001.html" rel="alternate"></link><updated>2013-07-19T00:00:00+02:00</updated><author><name>JRyannel</name></author><id>tag:jryannel.github.io/blog,2013-07-19:qmljs-001.html</id><summary type="html">&lt;p&gt;A QML/JS related post&lt;/p&gt;
</summary></entry><entry><title>Qt/C++ 001</title><link href="http://jryannel.github.io/blog/qtc-001.html" rel="alternate"></link><updated>2013-07-19T00:00:00+02:00</updated><author><name>JRyannel</name></author><id>tag:jryannel.github.io/blog,2013-07-19:qtc-001.html</id><summary type="html">&lt;p&gt;A qt/cpp related post.&lt;/p&gt;
</summary></entry><entry><title>Second Post</title><link href="http://jryannel.github.io/blog/second-post.html" rel="alternate"></link><updated>2013-07-19T00:00:00+02:00</updated><author><name>JRyannel</name></author><id>tag:jryannel.github.io/blog,2013-07-19:second-post.html</id><summary type="html">&lt;p&gt;This is the second post summary.&lt;/p&gt;
&lt;p&gt;And the second post content is coming here.&lt;/p&gt;
</summary></entry><entry><title>Utils 001</title><link href="http://jryannel.github.io/blog/utils-001.html" rel="alternate"></link><updated>2013-07-19T00:00:00+02:00</updated><author><name>JRyannel</name></author><id>tag:jryannel.github.io/blog,2013-07-19:utils-001.html</id><summary type="html">&lt;p&gt;A utils related post&lt;/p&gt;
&lt;div class="section" id="how-to-call-a-function-by-name"&gt;
&lt;h2&gt;How to call a function by name?&lt;/h2&gt;
&lt;p&gt;You can call a function using the standard object accessor:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root[name]()
&lt;/pre&gt;
&lt;p&gt;To verify that the property is really a function you can use:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
typeof root[name] === 'function'
&lt;/pre&gt;
&lt;p&gt;This allows you to store a callback in a &lt;tt class="docutils literal"&gt;ListModel&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListModel {
        id: itemModel
        ListElement { name: 'Music': callback: 'openMusic'}
}
&lt;/pre&gt;
&lt;p&gt;This is how you would use this then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListView {
        model: itemModel
        delegate: ListItem {
                text: model.name
                onClicked: root[model.callback]()
        }
}
&lt;/pre&gt;
&lt;/div&gt;
</summary></entry></feed>